package tl_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/xelaj/mtproto/encoding/tl"
	"github.com/xelaj/mtproto/telegram"
)

func TestDecode(t *testing.T) {
	type args struct {
		data []byte
		v    interface{}
	}
	tests := []struct {
		name     string
		args     args
		expected interface{}
		wantErr  bool
	}{
		{
			name: "testConfig",
			args: args{
				data: []byte{
					0x67, 0x40, 0x0b, 0x33, 0x48, 0x0e, 0x00, 0x00, 0x18, 0xc1, 0xa7, 0x5f, 0x79, 0xcf, 0xa7, 0x5f,
					0x37, 0x97, 0x79, 0xbc, 0x02, 0x00, 0x00, 0x00, 0x15, 0xc4, 0xb5, 0x1c, 0x13, 0x00, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39,
					0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x37, 0x35, 0x2e, 0x35, 0x33, 0x00, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39,
					0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x37, 0x35, 0x2e, 0x35, 0x33, 0x00, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30,
					0x31, 0x3a, 0x30, 0x62, 0x32, 0x38, 0x3a, 0x66, 0x32, 0x33, 0x64, 0x3a, 0x66, 0x30, 0x30, 0x31,
					0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a,
					0x30, 0x30, 0x30, 0x61, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x00, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x37,
					0x2e, 0x35, 0x31, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x10, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x37,
					0x2e, 0x35, 0x31, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x02, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00, 0x0f, 0x31, 0x34, 0x39, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x37,
					0x2e, 0x31, 0x35, 0x31, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x01, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30, 0x31, 0x3a, 0x30, 0x36, 0x37, 0x63, 0x3a, 0x30,
					0x34, 0x65, 0x38, 0x3a, 0x66, 0x30, 0x30, 0x32, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30,
					0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x61, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30,
					0x31, 0x3a, 0x30, 0x36, 0x37, 0x63, 0x3a, 0x30, 0x34, 0x65, 0x38, 0x3a, 0x66, 0x30, 0x30, 0x32,
					0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a,
					0x30, 0x30, 0x30, 0x62, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x00, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00, 0x0f, 0x31, 0x34, 0x39, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x37, 0x35,
					0x2e, 0x31, 0x30, 0x30, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x10, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00, 0x0f, 0x31, 0x34, 0x39, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x37, 0x35,
					0x2e, 0x31, 0x30, 0x30, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x01, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30, 0x31, 0x3a, 0x30, 0x62, 0x32, 0x38, 0x3a, 0x66,
					0x32, 0x33, 0x64, 0x3a, 0x66, 0x30, 0x30, 0x33, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30,
					0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x61, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39,
					0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x37, 0x2e, 0x39, 0x31, 0x00, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39,
					0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x37, 0x2e, 0x39, 0x31, 0x00, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30,
					0x31, 0x3a, 0x30, 0x36, 0x37, 0x63, 0x3a, 0x30, 0x34, 0x65, 0x38, 0x3a, 0x66, 0x30, 0x30, 0x34,
					0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a,
					0x30, 0x30, 0x30, 0x61, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x02, 0x00, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x34, 0x39, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x36, 0x35,
					0x2e, 0x39, 0x36, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x03, 0x00, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30, 0x31, 0x3a, 0x30, 0x36, 0x37, 0x63, 0x3a, 0x30,
					0x34, 0x65, 0x38, 0x3a, 0x66, 0x30, 0x30, 0x34, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30,
					0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x62, 0xbb, 0x01, 0x00, 0x00,
					0x0d, 0xa1, 0xb7, 0x18, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x27, 0x32, 0x30, 0x30,
					0x31, 0x3a, 0x30, 0x62, 0x32, 0x38, 0x3a, 0x66, 0x32, 0x33, 0x66, 0x3a, 0x66, 0x30, 0x30, 0x35,
					0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x3a,
					0x30, 0x30, 0x30, 0x61, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x00, 0x00, 0x00, 0x00,
					0x05, 0x00, 0x00, 0x00, 0x0d, 0x39, 0x31, 0x2e, 0x31, 0x30, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31,
					0x37, 0x32, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0xa1, 0xb7, 0x18, 0x10, 0x00, 0x00, 0x00,
					0x05, 0x00, 0x00, 0x00, 0x0d, 0x39, 0x31, 0x2e, 0x31, 0x30, 0x38, 0x2e, 0x35, 0x36, 0x2e, 0x31,
					0x37, 0x32, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x0d, 0x61, 0x70, 0x76, 0x33, 0x2e, 0x73, 0x74,
					0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x40, 0x0d, 0x03, 0x00,
					0x64, 0x00, 0x00, 0x00, 0x50, 0x34, 0x03, 0x00, 0x88, 0x13, 0x00, 0x00, 0x30, 0x75, 0x00, 0x00,
					0xe0, 0x93, 0x04, 0x00, 0x30, 0x75, 0x00, 0x00, 0xdc, 0x05, 0x00, 0x00, 0x60, 0xea, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0xff, 0xff, 0xff, 0x7f,
					0xff, 0xff, 0xff, 0x7f, 0x00, 0xea, 0x24, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
					0x80, 0x3a, 0x09, 0x00, 0x05, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x20, 0x4e, 0x00, 0x00,
					0x90, 0x5f, 0x01, 0x00, 0x30, 0x75, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x0d, 0x68, 0x74, 0x74,
					0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x2e, 0x6d, 0x65, 0x2f, 0x00, 0x00, 0x03, 0x67, 0x69, 0x66,
					0x0a, 0x66, 0x6f, 0x75, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x00, 0x04, 0x62, 0x69, 0x6e,
					0x67, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
				},
				v: &telegram.Config{},
			},
			expected: &telegram.Config{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tl.Decode(tt.args.data, tt.args.v); (err != nil) != tt.wantErr {
				t.Errorf("Decode() error = %v, wantErr %v", err, tt.wantErr)
			}
			assert.Equal(t, tt.expected, tt.args.v)
		})
	}
}
